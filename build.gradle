#!groovy
// The above triggers groovy syntax highlighting in vim

plugins {
  id 'java-gradle-plugin'
  id 'java'
  id 'groovy'
  id 'jacoco'
  id 'maven-publish'
  id "com.gradle.plugin-publish" version "0.12.0"
  id 'net.researchgate.release' version "2.8.1"
  // Eat your own dog food :)
  id "org.sonarqube" version "3.3"
  id "com.jfrog.artifactory" version "4.24.23"
  id "com.github.hierynomus.license" version "0.16.1"
  id "pl.droidsonroids.jacoco.testkit" version "1.0.9"
}

group = 'org.sonarsource.scanner.gradle'
description = 'Gradle plugin to help analyzing projects with SonarQube'
def projectName = 'SonarQube Scanner for Gradle'
def docUrl = 'http://redirect.sonarsource.com/doc/gradle.html'
def githubUrl = 'https://github.com/SonarSource/sonar-scanner-gradle'

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
  withJavadocJar()
  withSourcesJar()
}

compileJava {
  options.encoding = 'UTF-8'
}

javadoc {
  options.encoding = 'UTF-8'
}

ext {
  buildNumber = System.getProperty("buildNumber")
  release = project.hasProperty('release') && project.getProperty('release')
  official = project.hasProperty('official') && project.getProperty('official')
}
// Replaces the version defined in sources, usually x.y-SNAPSHOT, by a version identifying the build.
if (version.endsWith('-SNAPSHOT') && ext.buildNumber != null) {
  def versionSuffix = (version.toString().count('.') == 1 ? ".0.${ext.buildNumber}" : ".${ext.buildNumber}")
  version = version.replace('-SNAPSHOT', versionSuffix)
}

repositories {
  maven {
    url "https://maven.google.com"
  }
  def repository = project.hasProperty('qa') ? 'sonarsource-qa' : 'sonarsource'
  maven {
    url "https://repox.jfrog.io/repox/${repository}"
    // The environment variables ARTIFACTORY_PRIVATE_USERNAME and ARTIFACTORY_PRIVATE_PASSWORD are used on QA env (Jenkins)
    // On local box, please add artifactoryUsername and artifactoryPassword to ~/.gradle/gradle.properties
    def artifactoryUsername = System.env.'ARTIFACTORY_PRIVATE_USERNAME' ?: (project.hasProperty('artifactoryUsername') ? project.getProperty('artifactoryUsername') : '')
    def artifactoryPassword = System.env.'ARTIFACTORY_PRIVATE_PASSWORD' ?: (project.hasProperty('artifactoryPassword') ? project.getProperty('artifactoryPassword') : '')
    if (artifactoryUsername && artifactoryPassword) {
      credentials {
        username = artifactoryUsername
        password = artifactoryPassword
      }
    }
  }
}

dependencies {
  implementation 'org.sonarsource.scanner.api:sonar-scanner-api:2.16.2.588'
  compileOnly 'com.android.tools.build:gradle:4.2.0'
  compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
  testImplementation localGroovy()
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
  testImplementation 'org.hamcrest:hamcrest-all:1.3'
  testImplementation('org.spockframework:spock-core:2.1-groovy-3.0') {
    exclude module : 'groovy-all'
  }
}

gradlePlugin {
  plugins {
    sonarqubePlugin {
      displayName = projectName
      description = project.description
      id = 'org.sonarqube'
      implementationClass = 'org.sonarqube.gradle.SonarQubePlugin'
    }
  }
}

pluginBundle {
  website = docUrl
  vcsUrl = githubUrl

  tags = ['sonarqube', 'sonar', 'quality', 'qa']

  mavenCoordinates {
    groupId = project.group
    artifactId = "sonarqube-gradle-plugin"
  }
}

sonarqube {
  properties {
    property 'sonar.projectName', projectName
  }
}

license {
  header = rootProject.file('HEADER')
  mapping {
    java = 'SLASHSTAR_STYLE'
  }
  strictCheck true
  exclude "**/version.txt"
}

jacoco {
  toolVersion = "0.8.7"
}

jacocoTestReport {
  reports {
    xml.required = true
  }
}

tasks['sonarqube'].dependsOn jacocoTestReport

// Add required informations to deploy on central
publishing {
  publications {
    pluginMaven(MavenPublication) {
      pom {
        name = projectName
        description = project.description
        url = docUrl
        organization {
          name = 'SonarSource'
          url = 'http://www.sonarsource.com'
        }
        licenses {
          license {
            name = 'GNU LGPL 3'
            url = 'http://www.gnu.org/licenses/lgpl.txt'
            distribution = 'repo'
          }
        }
        scm {
          url = githubUrl
        }
        developers {
          developer {
            id = 'sonarsource-team'
            name = 'SonarSource Team'
          }
        }
      }
    }
  }
}

artifactory {
  clientConfig.includeEnvVars = true
  clientConfig.envVarsExcludePatterns = '*password*,*PASSWORD*,*secret*,*MAVEN_CMD_LINE_ARGS*,sun.java.command,*token*,*TOKEN*,*LOGIN*,*login*,*KEY*,*signing*'
  contextUrl = System.getenv('ARTIFACTORY_URL')
  publish {
    repository {
      repoKey = System.getenv('ARTIFACTORY_DEPLOY_REPO')
      username = System.getenv('ARTIFACTORY_DEPLOY_USERNAME')
      password = System.getenv('ARTIFACTORY_DEPLOY_PASSWORD')
    }
    defaults {
      properties = [
        'build.name': 'sonar-scanner-gradle',
        'build.number': System.getenv('BUILD_NUMBER'),
        'pr.branch.target': System.getenv('PULL_REQUEST_BRANCH_TARGET'),
        'pr.number': System.getenv('PULL_REQUEST_NUMBER'),
        'vcs.branch': System.getenv('GIT_BRANCH'),
        'vcs.revision': System.getenv('GIT_COMMIT'),
        'version': version
      ]
      publications 'pluginMaven'
      publishPom = true // Publish generated POM files to Artifactory (true by default)
      publishIvy = false // Publish generated Ivy descriptor files to Artifactory (true by default)
    }
  }
  clientConfig.info.buildName = 'sonar-scanner-gradle'
  clientConfig.info.buildNumber = System.getenv('BUILD_NUMBER')
  // The name of this variable is important because it's used by the delivery process when extracting version from Artifactory build info.
  clientConfig.info.addEnvironmentProperty('PROJECT_VERSION', "${version}")
}

afterReleaseBuild.dependsOn publishPlugins

processResources {
  filesMatching('**/version.txt') {
    expand version: project.version
  }
}

apply plugin: 'signing'

signing {
  def signingKeyId = findProperty("signingKeyId")
  def signingKey = findProperty("signingKey")
  def signingPassword = findProperty("signingPassword")
  useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
  required {
    def branch = System.getenv()["CIRRUS_BRANCH"]
    return (branch == 'master' || branch ==~ 'branch-[\\d.]+') &&
      gradle.taskGraph.hasTask(":artifactoryPublish")
  }
  sign publishing.publications
}

tasks.withType(Sign) {
  onlyIf {
    def branch = System.getenv()["CIRRUS_BRANCH"]
    return !artifactoryPublish.skip &&
      (branch == 'master' || branch ==~ 'branch-[\\d.]+') &&
      gradle.taskGraph.hasTask(":artifactoryPublish")
  }
}
